import com.nitgen.SDK.BSP.NBioBSPJNI;
import com.nitgen.SDK.BSP.NBioBSPISO4JNI;


public class NBioAPI_JavaExportRawToISO extends javax.swing.JDialog {

    public NBioAPI_JavaExportRawToISO(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Closing();
                System.exit(0);
            }
        });
        
        BSP = new NBioBSPJNI();
        
        if (BSP.IsErrorOccured())  {
            jTextArea1.setText("NBioBSP Error Occured [" + BSP.GetErrorCode() + "]\n");
        }
        else  {
            EXPORTENGINE = BSP.new Export();
            this.jTextArea1.setText("NBioBSP Version: " + BSP.GetVersion() + "\n");
        }
        
        IsWindow = isWindows();
    }

    @Override
    public void dispose()
    {
        if (BSP != null) {
            BSP.dispose();
            BSP = null;
        }
    }

    public void Closing()
    {
        dispose();
    }
    
    public static boolean isWindows()
    {
        String os = System.getProperty("os.name").toLowerCase();
        
        return (os.indexOf("win") >= 0);
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Raw to ISO V1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Raw to ISO with WSQ V1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Raw to ISO V2");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Raw to ISO with WSQ V2");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("ISO 1994-2 Data Check");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 345, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 345, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 345, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 345, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 345, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int nRet = BSP.OpenDevice();

        jTextArea1.setText("");
        jTextArea1.setText("NBioBSP Export Data ==> ISO 19794-4 with Raw V1\n");
        
        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            if (IsWindow)
                nRet = BSP.Enroll(null, hNewFIR, null, -1, hAuditFIR, null);
            else
                nRet = BSP.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hNewFIR, -1, hAuditFIR, null);

            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                NBioBSPJNI.Export.AUDIT exportAudit = EXPORTENGINE.new AUDIT();

                jTextArea1.append("Enroll Success\n");
                
                inputFIR.SetFIRHandle(hAuditFIR);
                nRet = EXPORTENGINE.ExportAudit(inputFIR, exportAudit);

                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    NBioBSPISO4JNI.ISOBUFFER ISOBuffer = NBioBSPISO4JNI.Allocater.new ISOBUFFER();
                    
                    jTextArea1.append("Export image sucess\n");
                    
                    nRet = NBioBSPISO4JNI.ExportRawToISOV1(exportAudit, ISOBuffer, false, NBioBSPISO4JNI.COMPRESS_MODE.NONE);

                    if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                        NBioBSPISO4JNI.NIMPORTRAWSET RawSet = NBioBSPISO4JNI.Allocater.new NIMPORTRAWSET();

                        jTextArea1.append("Export ISO 19794-4 data sucess\n");
                        
                        nRet = NBioBSPISO4JNI.ImportISOToRaw(ISOBuffer, RawSet);

                        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                            jTextArea1.append("Import ISO 19794-4 data\n");
                            
                            for (int i = 0; i < RawSet.Count; i++)  {
                                jTextArea1.append("DataLen: " + RawSet.RawData[i].Data.length + "\n");
                                jTextArea1.append("FingerID: " + RawSet.RawData[i].FingerID + "\n");
                                jTextArea1.append("Image Width: " + RawSet.RawData[i].ImgWidth + "\n");
                                jTextArea1.append("Image Height: " + RawSet.RawData[i].ImgHeight + "\n");
                            }
                        }
                        else  {
                            jTextArea1.append("ImportISOToRaw Error: " + nRet + "\n");
                        }
                    }
                    else  {
                        jTextArea1.append("ExportRawToISOV1 Error: " + nRet + "\n");
                    }
                }
                else  {
                    jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
                }
                
                hNewFIR.dispose();
                hAuditFIR.dispose();
            }
            else  {
                jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
            }

            BSP.CloseDevice();
        }
        else  {
            jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int nRet = BSP.OpenDevice();

        jTextArea1.setText("");
        jTextArea1.setText("NBioBSP Export Data ==> ISO 19794-4 with WSQ V1\n");
        
        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            if (IsWindow)
                nRet = BSP.Enroll(null, hNewFIR, null, -1, hAuditFIR, null);
            else
                nRet = BSP.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hNewFIR, -1, hAuditFIR, null);

            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                NBioBSPJNI.Export.AUDIT exportAudit = EXPORTENGINE.new AUDIT();

                jTextArea1.append("Enroll Success\n");
                
                inputFIR.SetFIRHandle(hAuditFIR);
                nRet = EXPORTENGINE.ExportAudit(inputFIR, exportAudit);

                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    NBioBSPISO4JNI.ISOBUFFER ISOBuffer = NBioBSPISO4JNI.Allocater.new ISOBUFFER();
                    
                    jTextArea1.append("Export image sucess\n");
                    
                    nRet = NBioBSPISO4JNI.ExportRawToISOV1(exportAudit, ISOBuffer, false, NBioBSPISO4JNI.COMPRESS_MODE.WSQ);

                    if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                        NBioBSPISO4JNI.NIMPORTRAWSET RawSet = NBioBSPISO4JNI.Allocater.new NIMPORTRAWSET();

                        jTextArea1.append("Export ISO 19794-4 data sucess\n");
                        
                        nRet = NBioBSPISO4JNI.ImportISOToRaw(ISOBuffer, RawSet);

                        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                            jTextArea1.append("Import ISO 19794-4 data\n");
                            
                            for (int i = 0; i < RawSet.Count; i++)  {
                                jTextArea1.append("DataLen: " + RawSet.RawData[i].Data.length + "\n");
                                jTextArea1.append("FingerID: " + RawSet.RawData[i].FingerID + "\n");
                                jTextArea1.append("Image Width: " + RawSet.RawData[i].ImgWidth + "\n");
                                jTextArea1.append("Image Height: " + RawSet.RawData[i].ImgHeight + "\n");
                            }
                        }
                        else  {
                            jTextArea1.append("ImportISOToRaw Error: " + nRet + "\n");
                        }
                    }
                    else  {
                        jTextArea1.append("ExportRawToISOV1 Error: " + nRet + "\n");
                    }
                }
                else  {
                    jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
                }
                
                hNewFIR.dispose();
                hAuditFIR.dispose();
            }
            else  {
                jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
            }

            BSP.CloseDevice();
        }
        else  {
            jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int nRet = BSP.OpenDevice();

        jTextArea1.setText("");
        jTextArea1.setText("NBioBSP Export Data ==> ISO 19794-4 with Raw V2\n");
        
        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            nRet = BSP.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hNewFIR, -1, hAuditFIR, null);

            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                NBioBSPJNI.Export.AUDIT exportAudit = EXPORTENGINE.new AUDIT();

                jTextArea1.append("Capture Success\n");
                
                inputFIR.SetFIRHandle(hAuditFIR);
                nRet = EXPORTENGINE.ExportAudit(inputFIR, exportAudit);

                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    NBioBSPISO4JNI.ISOBUFFER ISOBuffer = NBioBSPISO4JNI.Allocater.new ISOBUFFER();
                    
                    jTextArea1.append("Export image sucess\n");
                    
                    nRet = NBioBSPISO4JNI.ExportRawToISOV2(exportAudit.FingerData[0].FingerID,
                                                           (short) exportAudit.ImageWidth,
                                                           (short) exportAudit.ImageHeight,
                                                           exportAudit.FingerData[0].Template[0].Data,
                                                           ISOBuffer, false, NBioBSPISO4JNI.COMPRESS_MODE.NONE);

                    if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                        NBioBSPISO4JNI.NIMPORTRAWSET RawSet = NBioBSPISO4JNI.Allocater.new NIMPORTRAWSET();

                        jTextArea1.append("Export ISO 19794-4 data sucess\n");
                        
                        nRet = NBioBSPISO4JNI.ImportISOToRaw(ISOBuffer, RawSet);

                        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                            jTextArea1.append("Import ISO 19794-4 data\n");
                            
                            for (int i = 0; i < RawSet.Count; i++)  {
                                jTextArea1.append("DataLen: " + RawSet.RawData[i].Data.length + "\n");
                                jTextArea1.append("FingerID: " + RawSet.RawData[i].FingerID + "\n");
                                jTextArea1.append("Image Width: " + RawSet.RawData[i].ImgWidth + "\n");
                                jTextArea1.append("Image Height: " + RawSet.RawData[i].ImgHeight + "\n");
                            }
                        }
                        else  {
                            jTextArea1.append("ImportISOToRaw Error: " + nRet + "\n");
                        }
                    }
                    else  {
                        jTextArea1.append("ExportRawToISOV1 Error: " + nRet + "\n");
                    }
                }
                else  {
                    jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
                }
                
                hNewFIR.dispose();
                hAuditFIR.dispose();
            }
            else  {
                jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
            }

            BSP.CloseDevice();
        }
        else  {
            jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int nRet = BSP.OpenDevice();

        jTextArea1.setText("");
        jTextArea1.setText("NBioBSP Export Data ==> ISO 19794-4 with WSQ V2\n");
        
        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            nRet = BSP.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hNewFIR, -1, hAuditFIR, null);

            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                NBioBSPJNI.Export.AUDIT exportAudit = EXPORTENGINE.new AUDIT();

                jTextArea1.append("Capture Success\n");
                
                inputFIR.SetFIRHandle(hAuditFIR);
                nRet = EXPORTENGINE.ExportAudit(inputFIR, exportAudit);

                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    NBioBSPISO4JNI.ISOBUFFER ISOBuffer = NBioBSPISO4JNI.Allocater.new ISOBUFFER();
                    
                    jTextArea1.append("Export image sucess\n");
                    
                    nRet = NBioBSPISO4JNI.ExportRawToISOV2(exportAudit.FingerData[0].FingerID,
                                                           (short) exportAudit.ImageWidth,
                                                           (short) exportAudit.ImageHeight,
                                                           exportAudit.FingerData[0].Template[0].Data,
                                                           ISOBuffer, false, NBioBSPISO4JNI.COMPRESS_MODE.WSQ);

                    if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                        NBioBSPISO4JNI.NIMPORTRAWSET RawSet = NBioBSPISO4JNI.Allocater.new NIMPORTRAWSET();

                        jTextArea1.append("Export ISO 19794-4 data sucess\n");
                        
                        nRet = NBioBSPISO4JNI.ImportISOToRaw(ISOBuffer, RawSet);

                        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                            jTextArea1.append("Import ISO 19794-4 data\n");
                            
                            for (int i = 0; i < RawSet.Count; i++)  {
                                jTextArea1.append("DataLen: " + RawSet.RawData[i].Data.length + "\n");
                                jTextArea1.append("FingerID: " + RawSet.RawData[i].FingerID + "\n");
                                jTextArea1.append("Image Width: " + RawSet.RawData[i].ImgWidth + "\n");
                                jTextArea1.append("Image Height: " + RawSet.RawData[i].ImgHeight + "\n");
                            }
                        }
                        else  {
                            jTextArea1.append("ImportISOToRaw Error: " + nRet + "\n");
                        }
                    }
                    else  {
                        jTextArea1.append("ExportRawToISOV1 Error: " + nRet + "\n");
                    }
                }
                else  {
                    jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
                }
                
                hNewFIR.dispose();
                hAuditFIR.dispose();
            }
            else  {
                jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
            }

            BSP.CloseDevice();
        }
        else  {
            jTextArea1.append("NBioBSP Error: " + BSP.GetErrorCode() + "\n");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private int EnrollISO4Data(NBioBSPISO4JNI.ISOBUFFER ISOBuffer) {
        int nRet = BSP.OpenDevice();

        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            if (IsWindow)
                nRet = BSP.Enroll(null, hNewFIR, null, -1, hAuditFIR, null);
            else
                nRet = BSP.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hNewFIR, -1, hAuditFIR, null);

            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                NBioBSPJNI.Export.AUDIT exportAudit = EXPORTENGINE.new AUDIT();

                inputFIR.SetFIRHandle(hAuditFIR);
                nRet = EXPORTENGINE.ExportAudit(inputFIR, exportAudit);

                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    nRet = NBioBSPISO4JNI.ExportRawToISOV1(exportAudit, ISOBuffer, false, NBioBSPISO4JNI.COMPRESS_MODE.NONE);
                }
                
                hNewFIR.dispose();
                hAuditFIR.dispose();
            }

            BSP.CloseDevice();
        }
        
        return nRet;
    }
    
    private int ProcessISO4toISO2(NBioBSPISO4JNI.ISOBUFFER ISOBuffer, NBioBSPJNI.Export.DATA exportData) {
        NBioBSPISO4JNI.NIMPORTRAWSET RawSet = NBioBSPISO4JNI.Allocater.new NIMPORTRAWSET();
        
        int nRet = NBioBSPISO4JNI.ImportISOToRaw(ISOBuffer, RawSet);

        if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            byte i, j;
            short nImgWidth = RawSet.RawData[0].ImgWidth;
            short nImgHeight = RawSet.RawData[0].ImgHeight;
            byte[] arSampleCnt = new byte[11];
            byte nSampleCnt = 0;
            
            // Image size check
            for (i = 0; i < RawSet.Count; i++)  {
                if (nImgWidth != RawSet.RawData[i].ImgWidth || nImgHeight != RawSet.RawData[i].ImgHeight)
                    return NBioBSPJNI.ERROR.NBioAPIERROR_FUNCTION_FAIL;
                
                arSampleCnt[RawSet.RawData[i].FingerID]++;
            }

            // Sample per finger check
            for (i = 0; i < 11; i++)  {
                if (nSampleCnt == 0)
                    nSampleCnt = arSampleCnt[i];
                else  {
                    if (arSampleCnt[i] != 0 && nSampleCnt != arSampleCnt[i])
                        return NBioBSPJNI.ERROR.NBioAPIERROR_FUNCTION_FAIL;
                }
            }
            
            if (nSampleCnt < 1 || nSampleCnt > 2)
                return NBioBSPJNI.ERROR.NBioAPIERROR_FUNCTION_FAIL;
            
            NBioBSPJNI.Export.AUDIT ImportAudit = EXPORTENGINE.new AUDIT();
            
            ImportAudit.FingerNum = (byte) (RawSet.Count / (byte) nSampleCnt);
            ImportAudit.SamplesPerFinger = nSampleCnt;
            ImportAudit.ImageWidth = nImgWidth;
            ImportAudit.ImageHeight = nImgHeight;
            ImportAudit.FingerData = new NBioBSPJNI.Export.FINGER_DATA[ImportAudit.FingerNum];
            
            for (i = 0; i < ImportAudit.FingerNum; i++)  {
                ImportAudit.FingerData[i] = EXPORTENGINE.new FINGER_DATA();
                ImportAudit.FingerData[i].Template = new NBioBSPJNI.Export.TEMPLATE_DATA[nSampleCnt];
                
                for (j = 0; j < nSampleCnt; j++)
                    ImportAudit.FingerData[i].Template[j] = EXPORTENGINE.new TEMPLATE_DATA();
            }
            
            for (i = 0; i < ImportAudit.FingerNum; i++)  {
                byte k;
                
                for (j = 0; j < 11; j++)  {
                    if (arSampleCnt[j] != 0)  {
                        ImportAudit.FingerData[i].FingerID = j;
                        arSampleCnt[j] = 0;
                        break;
                    }
                }
                
                for (j = 0, k = 0; j < RawSet.Count; j++)  {
                    if (ImportAudit.FingerData[i].FingerID == RawSet.RawData[j].FingerID)  {
                        ImportAudit.FingerData[i].Template[k].Data = new byte[RawSet.RawData[j].Data.length];
                        ImportAudit.FingerData[i].Template[k++].Data = RawSet.RawData[j].Data;
                    }
                }
            }

            NBioBSPJNI.FIR_HANDLE hAuditFIR = BSP.new FIR_HANDLE();
            
            // Import Audit Data
            nRet = EXPORTENGINE.ImportAudit(ImportAudit, hAuditFIR);
            
            if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                NBioBSPJNI.FIR_HANDLE hNewFIR = BSP.new FIR_HANDLE();
                NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();

                inputFIR.SetFIRHandle(hAuditFIR);

                // Process Image Data
                nRet = BSP.Process(inputFIR, hNewFIR);
                
                if (nRet == NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    inputFIR.SetFIRHandle(hNewFIR);
                    
                    // Export ISO 19794-2 Data
                    nRet = EXPORTENGINE.ExportFIR(inputFIR, exportData, NBioBSPJNI.EXPORT_MINCONV_TYPE.ISO);
                    hNewFIR.dispose();
                }
                
                hAuditFIR.dispose();
            }
        }
        
        return nRet;
    }
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        NBioBSPISO4JNI.ISOBUFFER ISOBuffer = NBioBSPISO4JNI.Allocater.new ISOBUFFER();
        
        jTextArea1.setText("Check ISO 19794-4 Data Start\n");
        
        int nRet = EnrollISO4Data(ISOBuffer);

        if (nRet != NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
            jTextArea1.append("Enorll Error: " + nRet + "\n");
        }
        else  {
            NBioBSPJNI.Export.DATA exportData = EXPORTENGINE.new DATA();
            
            nRet = ProcessISO4toISO2(ISOBuffer, exportData);
            
            if (nRet != NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                jTextArea1.append("ProcessISO4toISO2 Error: " + nRet + "\n");
            }
            else  {
                NBioBSPJNI.FIR_HANDLE hMatchFIR = BSP.new FIR_HANDLE();
                
                nRet = EXPORTENGINE.ImportFIR(exportData, hMatchFIR);
                
                if (nRet != NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                    jTextArea1.append("ImportFIR Error: " + nRet + "\n");
                }
                else  {
                    NBioBSPJNI.INPUT_FIR inputFIR = BSP.new INPUT_FIR();
                    Boolean bResult = new Boolean(false);

                    inputFIR.SetFIRHandle(hMatchFIR);
                    
                    BSP.OpenDevice();
                    nRet = BSP.Verify(inputFIR, bResult, null);
                    BSP.CloseDevice();
                    
                    if (nRet != NBioBSPJNI.ERROR.NBioAPIERROR_NONE)  {
                        jTextArea1.append("Verify Error: " + nRet + "\n");
                    }
                    else  {
                        if (bResult)
                            jTextArea1.append("Verify Success!!\n");
                        else
                            jTextArea1.append("Verify Fail!!\n");
                    }

                    hMatchFIR.dispose();
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NBioAPI_JavaExportRawToISO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NBioAPI_JavaExportRawToISO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NBioAPI_JavaExportRawToISO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NBioAPI_JavaExportRawToISO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NBioAPI_JavaExportRawToISO dialog = new NBioAPI_JavaExportRawToISO(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }
    
    NBioBSPJNI                  BSP;
    NBioBSPJNI.Export           EXPORTENGINE;
    boolean                     IsWindow;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
