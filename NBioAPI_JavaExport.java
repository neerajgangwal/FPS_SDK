import com.nitgen.SDK.BSP.NBioBSPJNI;

public class NBioAPI_JavaExport extends javax.swing.JDialog {

    /** Creates new form NBioAPI_JavaExport */
    public NBioAPI_JavaExport(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                Closing();
                System.exit(0);
            }
        });

        bsp = new NBioBSPJNI();

        if (CheckError())
            return ;

        exportEngine = bsp.new Export();

        if (CheckError())
            return ;

        setTitle("NBioAPI_JavaExport BSP version: " + bsp.GetVersion());

        bsp.OpenDevice();

        if (CheckError())
            return ;

        btnCapture.setEnabled(true);
        btnEnroll.setEnabled(true);

        labelStatus.setText("NBioBSP Initialize success");
    }

    public void dispose()
    {
        if (bsp != null) {
            if (hSavedFIR != null)  {
                hSavedFIR.dispose();
                hSavedFIR = null;
            }

            if (hSavedAuditFIR != null)  {
                hSavedAuditFIR.dispose();
                hSavedAuditFIR = null;
            }

            bsp.CloseDevice();
            bsp.dispose();
            bsp = null;
        }
    }

    public void Closing()
    {
        dispose();
    }

    private Boolean CheckError()
    {
        if (bsp.IsErrorOccured())  {
            labelStatus.setText("NBioBSP Error Occured [" + bsp.GetErrorCode() + "]");
            return true;
        }

        return false;
    }

    private Boolean WriteFile(String fileName, byte[] data)
    {
        java.io.File newFile = new java.io.File(fileName);
        java.io.DataOutputStream out;

        try  {
            out = new java.io.DataOutputStream(new java.io.FileOutputStream(newFile, false));
        }
        catch (java.io.FileNotFoundException ex)  {
            labelStatus.setText("File Creat failed!!");
            return false;
        }

        try  {
            out.write(data);
            out.close();
        }
        catch (java.io.IOException e)  {
            labelStatus.setText("File Write failed!!");
            return false;
        }

        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        checkSaveRawImg = new javax.swing.JCheckBox();
        btnCapture = new javax.swing.JButton();
        btnEnroll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboExportType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        textTemplateSize = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboImportType = new javax.swing.JComboBox();
        btnLoad = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnVerify = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Capture Or Enroll"));

        checkSaveRawImg.setText("Save Raw Images");

        btnCapture.setText("Capture");
        btnCapture.setEnabled(false);
        btnCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaptureActionPerformed(evt);
            }
        });

        btnEnroll.setText("Enroll");
        btnEnroll.setEnabled(false);
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(checkSaveRawImg)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 181, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(btnEnroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnCapture, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(checkSaveRawImg))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(btnCapture)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(btnEnroll)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Export to"));

        jLabel1.setText("Type");

        comboExportType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FDP (FDU)", "FDA", "FDA (Old Version)", "FDAC", "FIM 10-HV / FIM 10-LV", "FIM 01-HV", "FIM 01-HD", "FeliCa", "Extension (Max 1024 bytes)", "Variable Size", "ANSI", "ISO" }));
        comboExportType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboExportTypeItemStateChanged(evt);
            }
        });

        jLabel2.setText("Template Size");

        textTemplateSize.setText("320");
        textTemplateSize.setEnabled(false);

        btnExport.setText("Export");
        btnExport.setEnabled(false);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel4.setText("=======>");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(comboExportType, 0, 374, Short.MAX_VALUE)
                            .add(textTemplateSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(btnExport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 191, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {btnExport, btnSave}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(comboExportType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(textTemplateSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnExport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Import from"));

        jLabel3.setText("Type");

        comboImportType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FDP (FDU)", "FDA", "FDA (Old Version)", "FDAC", "FIM 10-HV / FIM 10-LV", "FIM 01-HV", "FIM 01-HD", "FeliCa", "Extension (Max 1024 bytes)", "Variable Size", "ANSI", "ISO" }));

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnImport.setText("Import");
        btnImport.setEnabled(false);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        jLabel5.setText("====>");

        jLabel6.setText("====>");

        btnVerify.setText("Verify");
        btnVerify.setEnabled(false);
        btnVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel3)
                        .add(65, 65, 65)
                        .add(comboImportType, 0, 374, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(btnLoad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnImport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnVerify, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(new java.awt.Component[] {btnImport, btnLoad, btnVerify}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(comboImportType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnLoad, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5)
                    .add(btnImport, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(btnVerify, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        labelStatus.setText("No Error");
        labelStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCaptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaptureActionPerformed
        labelStatus.setText("Capture start");

        if (hSavedFIR != null)  {
            hSavedFIR.dispose();
            hSavedFIR = null;
        }

        if (hSavedAuditFIR != null)  {
            hSavedAuditFIR.dispose();
            hSavedAuditFIR = null;
        }

        if (checkSaveRawImg.isSelected())
            hSavedAuditFIR = bsp.new FIR_HANDLE();

        hSavedFIR = bsp.new FIR_HANDLE();

        bsp.Capture(NBioBSPJNI.FIR_PURPOSE.VERIFY, hSavedFIR, -1, hSavedAuditFIR, null);

        if (CheckError())
            return ;

        if (hSavedAuditFIR != null)  {
            NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();

            inputFIR.SetFIRHandle(hSavedAuditFIR);

            NBioBSPJNI.Export.AUDIT exportAudit = exportEngine.new AUDIT();

            exportEngine.ExportAudit(inputFIR, exportAudit);

            if (CheckError())
                return ;

            if (WriteFile("FingerImage_00_00.raw", exportAudit.FingerData[0].Template[0].Data) == false)  {
                labelStatus.setText("Image file save failed");
                return ;
            }

            java.awt.image.BufferedImage bufImage = new java.awt.image.BufferedImage(exportAudit.ImageWidth, exportAudit.ImageHeight, java.awt.image.BufferedImage.TYPE_BYTE_GRAY);
            bufImage.getRaster().setDataElements(0, 0, exportAudit.ImageWidth, exportAudit.ImageHeight, exportAudit.FingerData[0].Template[0].Data);

            try  {
                javax.imageio.ImageIO.write(bufImage, "jpeg", new java.io.File("test.jpg"));
            }
            catch (java.lang.NullPointerException ex)  {
                labelStatus.setText("Jpeg File NullPointerException!!");
            }
            catch (java.lang.IllegalArgumentException ex)  {
                labelStatus.setText("Jpeg File IllegalArgumentException!!");
            }
            catch (java.io.IOException ex)  {
                labelStatus.setText("Jpeg File IOException!!");
            }
        }

        btnExport.setEnabled(true);
        labelStatus.setText("Capture success");
    }//GEN-LAST:event_btnCaptureActionPerformed

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
        labelStatus.setText("Enroll start");

        if (hSavedFIR != null)  {
            hSavedFIR.dispose();
            hSavedFIR = null;
        }

        if (hSavedAuditFIR != null)  {
            hSavedAuditFIR.dispose();
            hSavedAuditFIR = null;
        }

        if (checkSaveRawImg.isSelected())
            hSavedAuditFIR = bsp.new FIR_HANDLE();

        hSavedFIR = bsp.new FIR_HANDLE();

        bsp.Enroll(null, hSavedFIR, null, -1, hSavedAuditFIR, null);

        if (CheckError())
            return ;

        if (hSavedAuditFIR != null)  {
            NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();

            inputFIR.SetFIRHandle(hSavedAuditFIR);

            NBioBSPJNI.Export.AUDIT exportAudit = exportEngine.new AUDIT();

            exportEngine.ExportAudit(inputFIR, exportAudit);

            if (CheckError())
                return ;

            int i, j;
            Boolean bSaveSuccess = true;
            String fileName;

            for (i = 0; i < exportAudit.FingerNum; i++)  {
                for (j = 0; j < exportAudit.SamplesPerFinger; j++)  {
                    fileName = "FingerImage_" + exportAudit.FingerData[i].FingerID + "_" + j + ".raw";

                    if (WriteFile(fileName, exportAudit.FingerData[i].Template[j].Data) == false)  {
                        bSaveSuccess = false;
                        break;
                    }
                }
            }

            if (bSaveSuccess == false)  {
                labelStatus.setText("Image file save failed");
                return ;
            }
        }
        
        btnExport.setEnabled(true);
        labelStatus.setText("Enroll success");
    }//GEN-LAST:event_btnEnrollActionPerformed

    private void comboExportTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboExportTypeItemStateChanged
        int nIndex = comboExportType.getSelectedIndex();

        if (nIndex == 9)
            textTemplateSize.setEnabled(true);
        else
            textTemplateSize.setEnabled(false);
    }//GEN-LAST:event_comboExportTypeItemStateChanged

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        if (hSavedFIR == null)  {
            labelStatus.setText("Can not find FIR data!!");
            return ;
        }

        labelStatus.setText("ExportFIR start");

        //In case of re-use the exportData, call System.gc() after set the null
        if (exportData != null)  {
            exportData = null;
            System.gc();
        }

        btnSave.setEnabled(false);

        int nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDP;
        int nComboIndex = comboExportType.getSelectedIndex();

        switch (nComboIndex)  {
            case 1:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDA;
                break;

            case 2:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.OLD_FDA;
                break;

            case 3:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDAC;
                break;

            case 4:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM10_HV;
                break;

            case 5:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM01_HV;
                break;

            case 6:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM01_HD;
                break;

            case 7:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FELICA;
                break;

            case 8:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.EXTENSION;
                break;

            case 9:
                try  {
                    int nVaule = Integer.parseInt(textTemplateSize.getText());

                    if (((nVaule %16) != 0) || (nVaule < 32))  {
                        labelStatus.setText("Variable length of template must be set to multiple of 16 and minimum 32.");
                        return ;
                    }

                    nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.TEMPLATESIZE_32 + ((nVaule - 32) / 16);
                }
                catch (NumberFormatException e) {
                    labelStatus.setText("Variable length of template must be set to multiple of 16 and minimum 32.");
                    return ;
                }
                break;

            case 10:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.ANSI;
                break;

            case 11:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.ISO;
                break;
        }

        NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();

        inputFIR.SetFIRHandle(hSavedFIR);
        exportData = exportEngine.new DATA();

        exportEngine.ExportFIR(inputFIR, exportData, nMinType);

        if (CheckError())
            return ;

        btnSave.setEnabled(true);

        labelStatus.setText("ExportFIR success");
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (exportData == null)
            labelStatus.setText("Can not find export data!!");

        labelStatus.setText("Image file save start");

        int i, j;
        Boolean bSaveSuccess = true;
        String FileName;

        for (i = 0; i < exportData.FingerNum; i++)  {
            for (j = 0; j < exportData.SamplesPerFinger; j++)  {
                FileName = "FingerData" + "_" + exportData.FingerData[i].FingerID + "_" + j + ".min";

                if (WriteFile(FileName, exportData.FingerData[i].Template[j].Data) == false)  {
                    bSaveSuccess = false;
                    break;
                }
            }
        }

        if (bSaveSuccess)
            labelStatus.setText("Image file save success");
        else
            labelStatus.setText("Image file save fail");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        labelStatus.setText("File load start");

        javax.swing.JFileChooser fs = new javax.swing.JFileChooser();

        fs.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        fs.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File f) {
                return f.getName().toLowerCase().endsWith(".min") || f.isDirectory();
            }

            public String getDescription() {
                return "NITGEN minute data";
            }
        });
        fs.setMultiSelectionEnabled(false);
        fs.setDialogTitle("Load Templates");
        fs.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

        if (fs.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION)  {
            java.io.FileInputStream fis = null;

            if (loadData == null)
                loadData = new byte[1024];

            btnImport.setEnabled(false);
            nLoadLen = 0;

            try  {
                fis = new java.io.FileInputStream(fs.getSelectedFile());

                nLoadLen = fis.read(loadData);
            }
            catch (Exception e)  {
                labelStatus.setText("File IO Error!!");
                return ;
            }
            finally  {
                try  {
                    fis.close();
                }
                catch (java.io.IOException e)
                {
                    labelStatus.setText("File IO Error!!");
                    return ;
                }
            }

            if (nLoadLen > 0)  {
                btnImport.setEnabled(true);
                labelStatus.setText("File load success");
            }
            else
                labelStatus.setText("File load fail");
        }
        else
            labelStatus.setText("File load fail");
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        if (loadData == null || nLoadLen < 32)  {
            labelStatus.setText("Import data not find or invalid data!!");
            return ;
        }

        labelStatus.setText("Import start");

        int nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDP;
        int nComboIndex = comboImportType.getSelectedIndex();

        switch (nComboIndex)  {
            case 1:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDA;
                break;

            case 2:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.OLD_FDA;
                break;

            case 3:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FDAC;
                break;

            case 4:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM10_HV;
                break;

            case 5:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM01_HV;
                break;

            case 6:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FIM01_HD;
                break;

            case 7:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.FELICA;
                break;

            case 8:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.EXTENSION;
                break;

            case 9:
                if ((nLoadLen % 16) != 0 || nLoadLen < 32)  {
                    labelStatus.setText("Variable length of template must be set to multiple of 16 and minimum 32.");
                    return ;
                }

                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.TEMPLATESIZE_32 + (nLoadLen - 32) / 16;
                break;

            case 10:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.ANSI;
                break;

            case 11:
                nMinType = NBioBSPJNI.EXPORT_MINCONV_TYPE.ISO;
                break;
        }

        if (hLoadFIR != null)  {
            hLoadFIR.dispose();
            hLoadFIR = null;
        }

        btnVerify.setEnabled(false);

        hLoadFIR = bsp.new FIR_HANDLE();

        exportEngine.ImportFIR(loadData, nLoadLen, nMinType, hLoadFIR);

        if (CheckError())
            return ;

        btnVerify.setEnabled(true);

        labelStatus.setText("Import success");
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
        if (hLoadFIR == null)  {
            labelStatus.setText("Can not find FIR data!!");
            return ;
        }

        labelStatus.setText("Verify start");

        NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();
        Boolean bResult = new Boolean(false);

        inputFIR.SetFIRHandle(hLoadFIR);

        bsp.Verify(inputFIR, bResult, null, -1, null, null);

        if (CheckError())
            return ;

        if (bResult)
            labelStatus.setText("Verify OK!");
        else
            labelStatus.setText("Failed to Verify!!");
    }//GEN-LAST:event_btnVerifyActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NBioAPI_JavaExport dialog = new NBioAPI_JavaExport(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }

    NBioBSPJNI                  bsp;
    NBioBSPJNI.FIR_HANDLE       hSavedFIR;
    NBioBSPJNI.FIR_HANDLE       hLoadFIR;
    byte[]                      loadData;
    int                         nLoadLen;
    NBioBSPJNI.FIR_HANDLE       hSavedAuditFIR;
    NBioBSPJNI.Export           exportEngine;
    NBioBSPJNI.Export.DATA      exportData;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapture;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnVerify;
    private javax.swing.JCheckBox checkSaveRawImg;
    private javax.swing.JComboBox comboExportType;
    private javax.swing.JComboBox comboImportType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JTextField textTemplateSize;
    // End of variables declaration//GEN-END:variables

}
