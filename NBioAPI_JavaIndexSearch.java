import com.nitgen.SDK.BSP.NBioBSPJNI;

public class NBioAPI_JavaIndexSearch extends javax.swing.JDialog {

    /** Creates new form NBioAPI_JavaIndexSearch */
    public NBioAPI_JavaIndexSearch(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                Closing();
                System.exit(0);
            }
        });

        bsp = new NBioBSPJNI();

        if (CheckError())
            return ;

        setTitle("NBioAPI_JavaIndexSearch BSP version: " + bsp.GetVersion());

        IndexSearchEngine = bsp.new IndexSearch();

        if (CheckError())
            return ;

        bsp.OpenDevice();

        if (CheckError())
            return ;

        tableReg.setRowSelectionAllowed(true);
        tableReg.setColumnSelectionAllowed(false);

        labelStatus.setText("NBioBSP Initialize success");
    }

    public void dispose()
    {
        if (IndexSearchEngine != null)  {
            IndexSearchEngine.dispose();
            IndexSearchEngine = null;
        }

        if (bsp != null) {
            bsp.CloseDevice();
            bsp.dispose();
            bsp = null;
        }
    }

    private Boolean CheckError()
    {
        if (bsp.IsErrorOccured())  {
            labelStatus.setText("NBioBSP Error Occured [" + bsp.GetErrorCode() + "]");
            return true;
        }

        return false;
    }

    public void Closing()
    {
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textUserID = new javax.swing.JTextField();
        btnReg = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableReg = new javax.swing.JTable();
        btnSaveDB = new javax.swing.JButton();
        btnRMData = new javax.swing.JButton();
        btnClearDB = new javax.swing.JButton();
        btnLoadDB = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        textMST = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listResult = new javax.swing.JList();
        labelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Registration"));

        jLabel1.setText("UserID");

        textUserID.setText("1");

        btnReg.setText("Register Finger to DB");
        btnReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegActionPerformed(evt);
            }
        });

        tableReg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID", "FInger ID", "Sample Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReg.setColumnSelectionAllowed(true);
        tableReg.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableReg);
        tableReg.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnSaveDB.setText("Save DB to File");
        btnSaveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveDBActionPerformed(evt);
            }
        });

        btnRMData.setText("Remove Data");
        btnRMData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRMDataActionPerformed(evt);
            }
        });

        btnClearDB.setText("Clear DB");
        btnClearDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearDBActionPerformed(evt);
            }
        });

        btnLoadDB.setText("Load DB from File");
        btnLoadDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(textUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(btnReg, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(btnRMData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 37, Short.MAX_VALUE)
                        .add(btnSaveDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(btnClearDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 37, Short.MAX_VALUE)
                        .add(btnLoadDB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {btnRMData, btnSaveDB}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textUserID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnReg)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 19, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSaveDB)
                    .add(btnRMData))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnClearDB)
                    .add(btnLoadDB))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        jLabel2.setText("Max Search TIme(sec)");

        textMST.setText("0");

        btnSearch.setText("Identify User");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listResult);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(textMST, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(btnSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 264, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(textMST, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        labelStatus.setText("No Error");
        labelStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .add(labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelStatus))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegActionPerformed
        String szValue;
        int nUserID;

        try  {
            szValue = textUserID.getText();
            nUserID = Integer.parseInt(szValue);
        }
        catch (NumberFormatException e)  {
            labelStatus.setText("Invalid User ID value");
            return ;
        }

        labelStatus.setText("Registration start");

        NBioBSPJNI.FIR_HANDLE hFIR = bsp.new FIR_HANDLE();

        bsp.Enroll(hFIR, null);
        
        if (CheckError())  {
            if (bsp.GetErrorCode() == NBioBSPJNI.ERROR.NBioAPIERROR_FUNCTION_FAIL)
                bsp.Capture(hFIR);

            if (CheckError())
                return ;
        }

        NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();
        NBioBSPJNI.IndexSearch.SAMPLE_INFO sampleInfo = IndexSearchEngine.new SAMPLE_INFO();

        inputFIR.SetFIRHandle(hFIR);
        IndexSearchEngine.AddFIR(inputFIR, nUserID, sampleInfo);

        if (CheckError())
            return ;

        int nNextRow = tableReg.getRowCount();
        int i, j;

        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableReg.getModel();

        for (i = 0; i < 11; i++)  {
            if (sampleInfo.SampleCount[i] != 0)  {
                for (j = 0; j < sampleInfo.SampleCount[i]; j++)  {
                    model.setRowCount(nNextRow + 1);
                    model.setValueAt(szValue, nNextRow, 0);
                    model.setValueAt(i, nNextRow, 1);
                    model.setValueAt(j, nNextRow++, 2);
                }
            }
        }

        hFIR.dispose();
        hFIR = null;

        labelStatus.setText("Registration success");
    }//GEN-LAST:event_btnRegActionPerformed

    private void btnRMDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRMDataActionPerformed
        labelStatus.setText("Remove start");

        int nSelectedRowCnt = tableReg.getSelectedRowCount();

        if (nSelectedRowCnt > 0)  {
            int nRows[] = tableReg.getSelectedRows();
            int i;

            for (i = 0; i < nRows.length; i++)  {
                NBioBSPJNI.IndexSearch.FP_INFO fpInfo = IndexSearchEngine.new FP_INFO();

                String szValue1 = (String) tableReg.getValueAt(nRows[i], 0);

                try  {
                    fpInfo.ID = Integer.parseInt(szValue1);
                }
                catch (NumberFormatException e)  {
                    labelStatus.setText("Invalid User ID value");
                    return ;
                }

                Integer nValue1 = (Integer) tableReg.getValueAt(nRows[i], 1);
                fpInfo.FingerID = nValue1.byteValue();

                Integer nValue2 = (Integer) tableReg.getValueAt(nRows[i], 2);
                fpInfo.SampleNumber = nValue2.byteValue();

                IndexSearchEngine.RemoveData(fpInfo);

                if (CheckError())
                    return ;
            }

            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableReg.getModel();

            for (i = 0; i < nRows.length; i++)
                model.removeRow(nRows[i] - i);

            labelStatus.setText("Remove success");
        }
    }//GEN-LAST:event_btnRMDataActionPerformed

    private void btnClearDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDBActionPerformed
        labelStatus.setText("ClearDB start");

        IndexSearchEngine.ClearDB();

        if (CheckError())
            return ;

        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableReg.getModel();
        model.setRowCount(0);
        labelStatus.setText("ClearDB success");
    }//GEN-LAST:event_btnClearDBActionPerformed

    private void btnSaveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveDBActionPerformed
        labelStatus.setText("SaveDB start");

        javax.swing.JFileChooser fs = new javax.swing.JFileChooser();

        fs.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fs.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        fs.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File f) {
                return f.getName().toUpperCase().endsWith(".ISDB") || f.isDirectory();
            }

            public String getDescription() {
                return "NITGEN IndexSearch DB";
            }
        });
        fs.setMultiSelectionEnabled(false);
        fs.setDialogTitle("Save IndexSearch DB");
        fs.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

        if (fs.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION)  {
            String szSavePath = fs.getSelectedFile().getPath() + ".ISDB";

            IndexSearchEngine.SaveDB(szSavePath);

            if (CheckError())
                return ;

            szSavePath = fs.getSelectedFile().getPath() + ".FID";

            try  {
                java.io.FileWriter fWrite = new java.io.FileWriter(szSavePath);
                java.io.PrintWriter pWrite = new java.io.PrintWriter(fWrite);

                int nCnt = tableReg.getRowCount();
                int i;

                for (i = 0; i < nCnt; i++)  {
                    pWrite.println((String) tableReg.getValueAt(i, 0) + "\t" + tableReg.getValueAt(i, 1) + "\t" + tableReg.getValueAt(i, 2));
                }

                pWrite.close();
                fWrite.close();
            }
            catch (java.io.IOException e)  {
                labelStatus.setText("File IO Error");
                return ;
            }

            labelStatus.setText("SaveDB success");
        }
    }//GEN-LAST:event_btnSaveDBActionPerformed

    private void btnLoadDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDBActionPerformed
        labelStatus.setText("LoadDB start");

        javax.swing.JFileChooser fs = new javax.swing.JFileChooser();

        fs.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fs.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        fs.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File f) {
                return f.getName().toUpperCase().endsWith(".ISDB") || f.isDirectory();
            }

            public String getDescription() {
                return "NITGEN IndexSearch DB";
            }
        });
        fs.setMultiSelectionEnabled(false);
        fs.setDialogTitle("Load IndexSearch DB");
        fs.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);

        if (fs.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION)  {
            String szLoadPath = fs.getSelectedFile().getPath();

            IndexSearchEngine.ClearDB();

            if (CheckError())
                return ;
            
            IndexSearchEngine.LoadDB(szLoadPath);

            if (CheckError())
                return ;

            java.io.BufferedReader reader = null;

            try  {
                String szFileContents = null;
                String[] szLoadFIDPath = szLoadPath.split(".ISDB");
                reader = new java.io.BufferedReader(new java.io.FileReader(szLoadFIDPath[0] + ".FID"));
                javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableReg.getModel();
                int nRowCnt = 0;

                model.setRowCount(0);

                do  {
                    szFileContents = reader.readLine();

                    if (szFileContents != null)  {
                        String[] arContents = szFileContents.split("\t");

                        model.setRowCount(nRowCnt + 1);
                        model.setValueAt(arContents[0], nRowCnt, 0);
                        model.setValueAt(arContents[1], nRowCnt, 1);
                        model.setValueAt(arContents[2], nRowCnt++, 2);
                    }
                }
                while (szFileContents != null) ;

            }
            catch (java.io.FileNotFoundException e)  {
                labelStatus.setText("File not founded!!");
                return ;
            }
            catch (java.io.IOException e)  {
                labelStatus.setText("File IO Exception");
                return ;
            }
            finally  {
                try  {
                    if (reader != null)
                        reader.close();
                }
                catch (java.io.IOException e)  {
                    labelStatus.setText("File IO Exception");
                }
            }

            labelStatus.setText("LoadDB success");
        }

        fs = null;
    }//GEN-LAST:event_btnLoadDBActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        labelStatus.setText("Identify start");

        int nMaxSearchTime = 0;

        try  {
            nMaxSearchTime = Integer.parseInt(textMST.getText());
        }
        catch (NumberFormatException e) {
            nMaxSearchTime = 0;
        }

        NBioBSPJNI.FIR_HANDLE hCapturedFIR = bsp.new FIR_HANDLE();

        bsp.Capture(hCapturedFIR);

        if (CheckError())
            return ;

        NBioBSPJNI.INPUT_FIR inputFIR = bsp.new INPUT_FIR();
        inputFIR.SetFIRHandle(hCapturedFIR);

        NBioBSPJNI.IndexSearch.FP_INFO fpInfo = IndexSearchEngine.new FP_INFO();

        IndexSearchEngine.Identify(inputFIR, 5, fpInfo, nMaxSearchTime);

        if (CheckError())  {
            if (bsp.GetErrorCode() == NBioBSPJNI.ERROR.NBioAPIERROR_INDEXSEARCH_IDENTIFY_FAIL)  {
                String[] szFinds = new String[1];

                szFinds[0] = "Can not find user";
                listResult.setListData(szFinds);
            }
            else if (bsp.GetErrorCode() == NBioBSPJNI.ERROR.NBioAPIERROR_INDEXSEARCH_IDENTIFY_STOP)  {
                String[] szFinds = new String[1];

                szFinds[0] = "Time out";
                listResult.setListData(szFinds);
            }

            return ;
        }

        String[] szValues = new String[4];

        szValues[0] = "Find Result";
        szValues[1] = "UserID: " + fpInfo.ID;
        szValues[2] = "Finger Num: " + fpInfo.FingerID;
        szValues[3] = "Sample Num: " + fpInfo.SampleNumber;
        
        listResult.setListData(szValues);
        
        labelStatus.setText("Identify success");
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NBioAPI_JavaIndexSearch dialog = new NBioAPI_JavaIndexSearch(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }

    NBioBSPJNI                  bsp;
    NBioBSPJNI.IndexSearch      IndexSearchEngine;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearDB;
    private javax.swing.JButton btnLoadDB;
    private javax.swing.JButton btnRMData;
    private javax.swing.JButton btnReg;
    private javax.swing.JButton btnSaveDB;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JList listResult;
    private javax.swing.JTable tableReg;
    private javax.swing.JTextField textMST;
    private javax.swing.JTextField textUserID;
    // End of variables declaration//GEN-END:variables

}
